1. Login Table
a) Login Table creation:
CREATE TABLE Login (
    CustomerID INT NOT NULL PRIMARY KEY,
    LastLogin DATETIME NOT NULL,
    LastLogout DATETIME NOT NULL,
    updatedPassword VARCHAR(255) NOT NULL,
    oldPassword VARCHAR(255) NOT NULL,
    is_now_logged_in VARCHAR(1) NOT NULL CHECK (is_now_logged_in IN ('Y', 'N'))
);

b) Insert some values:
INSERT INTO Login (CustomerID, LastLogin, LastLogout, updatedPassword, oldPassword, is_now_logged_in)  
VALUES  
(101, '2024-02-20 08:00:00', '2024-02-20 12:00:00', 'newpass123', 'oldpass456', 'Y'),  
(102, '2024-02-20 09:30:00', '2024-02-20 13:00:00', 'pass789', 'pass123', 'Y'),  
(103, '2024-02-20 10:00:00', '2024-02-20 14:00:00', 'xyzpass', 'abcpass', 'Y'),  
(104, '2024-02-20 11:15:00', '2024-02-20 15:00:00', 'mypass', 'yourpass', 'Y'),  
(105, '2024-02-20 12:30:00', '2024-02-20 16:00:00', 'securepass', 'oldsecurepass', 'N'),  
(106, '2024-02-20 13:00:00', '2024-02-20 17:00:00', 'adminpass', 'oldadmin', 'N');  

c) Query for first 50% logged in users.
SELECT CustomerID 
FROM Login 
WHERE is_now_logged_in = 'Y' 
ORDER BY LastLogin ASC 
LIMIT (SELECT COUNT(*) / 2 FROM Login WHERE is_now_logged_in = 'Y');



2. Registration Table.
a) Table creation.
CREATE TABLE Registration (
    CustomerID INT PRIMARY KEY NOT NULL,
    Customer_Name VARCHAR(255) NOT NULL,
    Email VARCHAR(255) NOT NULL,
    Password VARCHAR(255) NOT NULL,
    Address VARCHAR(255) NOT NULL,
    Contact_number INT NOT NULL,
    Updated_Name VARCHAR(255)  -- New column to store the updated name
);

b) Data insertion:
INSERT INTO Registration (CustomerID, Customer_Name, Email, Password, Address, Contact_number, Updated_Name)  
VALUES  
(1, 'John', 'john@email.com', 'password123', '123 Main St, New York, US', 9876543210, NULL),  
(2, 'Priya', 'priya@email.com', 'securepass', 'RZ/12-4, Mahavir Enclave, New Delhi, India', 9876543211, NULL),  
(3, 'Mark', 'mark@email.com', 'markpass456', '45 Palm St, California, US', 9876543212, NULL),  
(4, 'Rahul', 'rahul@email.com', 'rahulpass789', 'Sector 21, Gurgaon, India', 9876543213, NULL),  
(5, 'Emily', 'emily@email.com', 'emilypass999', '789 Bay Area, Texas, US', 9876543214, NULL),  
(6, 'Amit', 'amit@email.com', 'amitsecure', 'MG Road, Bangalore, India', 9876543215, NULL);  

c) Actual Query:
UPDATE Registration
SET Updated_Name = 
    CASE 
        WHEN Address LIKE '%US%' THEN CONCAT('US_', Customer_Name)
        WHEN Address LIKE '%India%' THEN CONCAT('IN_', Customer_Name)
        ELSE Customer_Name
    END;

d) Query to Retrieve Updated Report:
SELECT CustomerID, Customer_Name, Updated_Name, Address
FROM Registration
WHERE Updated_Name IS NOT NULL;


3. Product Table:
a) Table creation:
CREATE TABLE Product (
    ProductID INT PRIMARY KEY NOT NULL,
    ProductName VARCHAR(255) NOT NULL,
    Price INT NOT NULL,
    Quantity INT NOT NULL,
    Reserved VARCHAR(10) NOT NULL CHECK (Reserved IN ('Yes', 'No')),  -- Ensures only 'Yes' or 'No'
    CustomerID INT NOT NULL,
    FOREIGN KEY (CustomerID) REFERENCES Registration(CustomerID)  -- Linking to Registration table
);


b) Data insertion:
INSERT INTO Product (ProductID, ProductName, Price, Quantity, Reserved, CustomerID)  
VALUES  
(1, 'Rice', 30, 10, 'Yes', 101),  
(2, 'Milk', 10, 20, 'No', 102),  
(3, 'Bread', 15, 15, 'Yes', 103),  
(4, 'Eggs', 20, 12, 'No', 104),  
(5, 'Apples', 25, 8, 'Yes', 105),  
(6, 'Bananas', 10, 18, 'No', 106),  
(7, 'Tomatoes', 12, 14, 'Yes', 107),  
(8, 'Potatoes', 18, 22, 'No', 108),  
(9, 'Chicken', 40, 5, 'Yes', 109),  
(10, 'Fish', 35, 7, 'No', 110);


c) SQL query for report 1:
SELECT DISTINCT ProductName, Price 
FROM Product;


d) SQL query for report 2:
SELECT r.CustomerID, r.Customer_Name, p.ProductID, p.ProductName, p.Price
FROM Product p
JOIN Registration r ON p.CustomerID = r.CustomerID
ORDER BY r.CustomerID;



4. Transaction table:
a) Table creation:
CREATE TABLE Transaction (
    TransactionID INT PRIMARY KEY NOT NULL,
    CustomerID INT NOT NULL,
    ProductID INT NOT NULL,
    Total_Amount INT NOT NULL,
    no_of_items INT NOT NULL,
    FOREIGN KEY (CustomerID) REFERENCES Registration(CustomerID),
    FOREIGN KEY (ProductID) REFERENCES Product(ProductID)
);


b) Data Insertion:
INSERT INTO Transaction (TransactionID, CustomerID, ProductID, Total_Amount, no_of_items)  
VALUES  
(1, 101, 1, 300, 10),  
(2, 102, 2, 200, 20),  
(3, 103, 3, 150, 10),  
(4, 104, 4, 400, 5),  
(5, 105, 5, 500, 8),  
(6, 106, 6, 120, 12),  
(7, 107, 7, 250, 14),  
(8, 108, 8, 350, 22),  
(9, 109, 9, 600, 5),  
(10, 110, 10, 450, 7);


c) display transactions in descending order:
SELECT * FROM Transaction
ORDER BY Total_Amount DESC;


d) display second highest:
SELECT * FROM Transaction
ORDER BY Total_Amount DESC
LIMIT 1 OFFSET 1;



5. Admin table.
a) Table creation.
CREATE TABLE Admin (
    AdminID INT PRIMARY KEY NOT NULL,
    Admin_Password VARCHAR(255) NOT NULL,
    CustomerID INT NOT NULL,
    ProductID INT NOT NULL,
    TransactionID INT NOT NULL,
    FOREIGN KEY (CustomerID) REFERENCES Registration(CustomerID),
    FOREIGN KEY (ProductID) REFERENCES Product(ProductID),
    FOREIGN KEY (TransactionID) REFERENCES Transaction(TransactionID)
);


b) Data Insertion.
INSERT INTO Admin (AdminID, Admin_Password, CustomerID, ProductID, TransactionID)  
VALUES  
(1, 'admin123', 101, 1, 1),  
(2, 'admin456', 102, 2, 2),  
(3, 'admin789', 103, 3, 3),  
(4, 'admin999', 104, 4, 4),  
(5, 'admin555', 105, 5, 5);


c) Query for report:
SELECT r.CustomerID, r.Customer_Name, r.Email, r.Address, t.TransactionID, p.ProductName, t.Total_Amount
FROM Admin a
JOIN Registration r ON a.CustomerID = r.CustomerID
JOIN Transaction t ON a.TransactionID = t.TransactionID
JOIN Product p ON a.ProductID = p.ProductID
ORDER BY t.TransactionID;


------Thank You------
